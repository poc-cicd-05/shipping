---
groups:
- name: build-pipeline
  jobs:
  - maven-build
  - deploy-to-dev
  - run-health-check
  - run-functional-check
  - deploy-to-staging
  # - run-e2e-test
  # - validate-test-result
  - deploy-to-production
  - promote-new-version
  # - upload-git-release

- name: init-dynatrace
  jobs: 
  - init-dynatrace-shipping

- name: performance
  jobs:
  - run-performance-check
  - validate-performance-check

resource_types:
- name: dynatrace-resource
  type: docker-image
  source:
    repository: mvilliger/dynatrace-resource

resources:

#GitHub Release Repository
# - name: shipping-release
#   type: github-release
#   source:
#     owner: acm-workshop-concourse
#     repository: shipping
#     access_token: ((github-access-token))

# GitHub Repositories
- name: git-pipeline
  type: git
  source:
    branch: master
    uri: https://github.com/((pipeline-tasks))/cf-deploy-sockshop.git

- name: git-shipping
  type: git
  source:
    branch: master
    uri: https://github.com/((source-code))/shipping.git

- name: dynatrace
  type: dynatrace-resource
  source:
    apitoken: ((dt_api_token))
    tenanthost: ((dt_tenant_host))

- name: shipping-release-bucket
  type: s3
  source:
    region_name: eu-west-1
    regexp: shipping/shipping-(.*).jar
    bucket: ((s3-bucket))
    access_key_id: ((s3-access-key-id))
    secret_access_key: ((s3-secret-access-key))

- name: version
  type: semver
  source:
    driver: git
    uri: https://github.com/((source-code))/shipping.git
    branch: master
    file: version

# PCF Environments

- name: pcf-dev
  type: cf
  source:
    api: ((pcf-dev-api))
    username: ((pcf-username))
    password: ((pcf-password))
    organization: ((pcf-dev-organization))
    space: ((pcf-dev-space))
    skip_cert_check: false

- name: pcf-staging
  type: cf
  source:
    api: ((pcf-staging-api))
    username: ((pcf-username))
    password: ((pcf-password))
    organization: ((pcf-staging-organization))
    space: ((pcf-staging-space))
    skip_cert_check: false

- name: pcf-production
  type: cf
  source:
    api: ((pcf-production-api))
    username: ((pcf-username))
    password: ((pcf-password))
    organization: ((pcf-production-organization))
    space: ((pcf-production-space))
    skip_cert_check: false

jobs:

# Initialize Dynatrace Custom Device

- name: init-dynatrace-shipping
  public: true
  plan:
  - aggregate:
    - get: git-pipeline
    - get: git-shipping
  - task: init-dynatrace-task
    file: git-pipeline//ci/tasks/init-dynatrace-task.yml
    params: 
      apitoken: ((dt_api_token))
      tenanthost: ((dt_tenant_host))
      APP_REPO: git-shipping

# SHIPPING

- name: maven-build
  plan:
  - get: git-shipping
    trigger: true
  - get: version
    params: { pre: build }
  - task: mvn-build
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: maven, tag: 3.2-jdk-8}
      inputs:
      - name: git-shipping
      - name: version
      outputs:
      - name: workspace
      run:
        path: /bin/sh
        args:
        - -exc
        - |
          # Caching Maven
          export ROOT_FOLDER=$( pwd )
          M2_HOME="${HOME}/.m2"
          M2_CACHE="${ROOT_FOLDER}/maven"
          echo "Generating symbolic link for Maven cache"
          ln -s "${M2_CACHE}" "${M2_HOME}"

          # Build App
          output_dir=workspace
          cd git-shipping
          mvn -DskipTests package
          cd ..
          mv git-shipping/target/shipping.jar git-shipping/target/shipping-$(cat version/number).jar
          cp git-shipping/target/shipping-*.jar "${output_dir}/"
      caches:
        - path: maven
  - put: shipping-release-bucket
    params:
      file: workspace/shipping-*.jar

- name: deploy-to-dev
  serial: true
  public: true
  plan:
  - get: git-shipping
    trigger: true
    passed:
      - maven-build
  - get: shipping-release-bucket
    passed:
      - maven-build
  - get: git-pipeline
    trigger: false      
  - task: prepare-app-manifest
    file: git-pipeline//ci/tasks/app-manifest-prep.yml
    params:
      STAGE: Dev
      PCF_APP_SUFFIX: ((pcf-dev-shipping-suffix)) 
      APP_REPO: git-shipping           
  - put: pcf-dev
    params:
      path: shipping-release-bucket/shipping-*.jar
      manifest: app-manifest-output/manifest.yml  
  - put: dynatrace
    params:
      monspecserviceenvironment: shipping/Dev
      pipelinetaskname: deploy-to-dev
      deployversion: v1.0
      APP_REPO: git-shipping

- name: run-health-check
  serial: true
  public: true
  plan:
  - aggregate:
    - get: git-shipping
      trigger: true
      passed:
        - deploy-to-dev
    - get: git-pipeline
      trigger: false 
  - task: run-health-check
    file: git-pipeline//ci/tasks/jmeter-test.yml
    params:
      APP_REPO: git-shipping
      PRODUCTION: false
      SCRIPT_NAME: jmeter/basiccheck.jmx
      RESULT_DIR: HealthCheck
      PCF_APP_SUFFIX: ((pcf-dev-shipping-suffix))
      PCF_APP_DOMAIN: ((pcf-dev-app-domain))
      CHECK_PATH: /health
      SERVER_PORT: 80
      VU_COUNT: 1
      LOOP_COUNT: 1
      DT_LTN: HealthCheck
      FUNC_VALIDATION: true
      THINK_TIME: 0

- name: run-functional-check
  serial: true
  public: true
  plan:
  - aggregate:
    - get: git-shipping
      trigger: true
      passed:
        - run-health-check
    - get: git-pipeline
  - task: run-functional-check
    file: git-pipeline//ci/tasks/jmeter-test.yml
    params:
      APP_REPO: git-shipping
      PRODUCTION: false
      SCRIPT_NAME: jmeter/shipping_load.jmx
      RESULT_DIR: FuncCheck
      PCF_APP_SUFFIX: ((pcf-dev-shipping-suffix))
      PCF_APP_DOMAIN: ((pcf-dev-app-domain))
      CHECK_PATH: /health
      SERVER_PORT: 80
      VU_COUNT: 1
      LOOP_COUNT: 1
      DT_LTN: FuncCheck
      FUNC_VALIDATION: true
      AVG_RT_VALIDATION: 3000
      THINK_TIME: 0

- name: deploy-to-staging
  serial: true
  public: true
  plan:
  - get: git-shipping
    trigger: true
    passed:
      - run-functional-check
  - get: shipping-release-bucket
    passed:
      - maven-build
  - get: git-pipeline
    trigger: false      
  - task: prepare-app-manifest
    file: git-pipeline//ci/tasks/app-manifest-prep.yml
    params:
      STAGE: Staging
      PCF_APP_SUFFIX: ((pcf-staging-shipping-suffix)) 
      APP_REPO: git-shipping               
  - put: pcf-staging
    params:
      path: shipping-release-bucket/shipping-*.jar
      manifest: app-manifest-output/manifest.yml
  - put: dynatrace
    params:
      monspecserviceenvironment: shipping/Staging
      pipelinetaskname: deploy-to-staging
      deployversion: v1.0 
      APP_REPO: git-shipping 

# - name: run-e2e-test
#   serial: true
#   public: true
#   plan:
#   - aggregate:
#     - get: git-shipping
#       trigger: true
#       passed:
#        - deploy-to-staging
#     - get: git-pipeline
#   - task: run-e2e-check
#     file: git-pipeline//ci/tasks/load-tests.yml
#     params:
#       APP_REPO: git-pipeline
#       FUNC_VALIDATION: yes
#       PRODUCTION: true
#       SCRIPT_NAME: /ci/jmeterfront-end_e2e_load.jmx
#       PCF_APP_SUFFIX: ((pcf-staging-shipping-suffix))
#       PCF_APP_DOMAIN: ((pcf-staging-app-domain))
#       DT_LTN: e2eCheck
#       VUCount: 5
#       LoopCount: 20 
#   - task: push-dynatrace-monspec-data
#     file: git-pipeline//ci/tasks/push-dynatrace-monspec-data.yml
#     params: 
#       monspecserviceenvironment: shipping/Production-$NEXT_APP_COLOR
#       apitoken: ((dt_api_token))
#       tenanthost: ((dt_tenant_host))
#       APP_REPO: git-shipping    

# - name: validate-shipping-load-test
#   serial: true
#   public: true
#   plan:
#   - get: git-shipping
#     trigger: true
#     passed:
#       - execute-shipping-load-tests
#   - get: git-pipeline
#     trigger: false      
#   - task: get-current-app-color
#     file: git-pipeline//ci/tasks/current-app-get-info.yml
#     params:
#       PCF_APP_SUFFIX: ((pcf-prod-shipping-suffix))
#       PCF_API: ((pcf-prod-api))
#       PCF_ORG: ((pcf-prod-organization))
#       PCF_USER: ((pcf-prod-deploy-username))
#       PCF_PWD: ((pcf-prod-deploy-password))
#       PCF_SPACE: ((pcf-prod-space))       
#   - task: validate-via-monspec
#     file: git-pipeline//ci/tasks/validate-via-monspec.yml
#     params: 
#       monspeccomparison: shipping/Production-$NEXT_APP_COLOR\ToProduction-$CURRENT_APP_COLOR\Last5m
#       apitoken: ((dt_api_token))
#       tenanthost: ((dt_tenant_host))
#       APP_REPO: git-shipping     

- name: deploy-to-production
  serial: true
  public: true
  plan:
  - get: git-shipping
    trigger: true
    passed:
      - deploy-to-staging
  - get: shipping-release-bucket
    passed:
      - maven-build
  - get: git-pipeline
    trigger: false      
  - task: get-current-app-color
    file: git-pipeline//ci/tasks/current-app-get-info.yml
    params:
      PCF_APP_SUFFIX: ((pcf-production-shipping-suffix))
      PCF_API: ((pcf-production-api))
      PCF_ORG: ((pcf-production-organization))
      PCF_SPACE: ((pcf-production-space))  
      PCF_USER: ((pcf-username))
      PCF_PWD: ((pcf-password))
  - task: prepare-app-manifest
    file: git-pipeline//ci/tasks/app-manifest-prep.yml
    params:
      STAGE: Production 
      PCF_APP_SUFFIX: ((pcf-production-shipping-suffix)) 
      APP_REPO: git-shipping     
  - put: pcf-production
    params:
      path: shipping-release-bucket/shipping-*.jar
      manifest: app-manifest-output/manifest.yml
  - put: dynatrace
    params:
      monspecserviceenvironment: shipping/Production
      pipelinetaskname: deploy-to-production
      deployversion: v1.0 
      APP_REPO: git-shipping 

- name: promote-new-version
  serial: true
  public: true
  plan:
  - get: git-shipping
    trigger: true
    passed:
      - deploy-to-production
  - get: git-pipeline
    trigger: false      
  - task: get-current-app-color
    file: git-pipeline//ci/tasks/current-app-get-info.yml
    params:
      PCF_APP_SUFFIX: ((pcf-production-shipping-suffix))
      PCF_API: ((pcf-production-api))
      PCF_ORG: ((pcf-production-organization))
      PCF_SPACE: ((pcf-production-space))  
      PCF_USER: ((pcf-username))
      PCF_PWD: ((pcf-password))
  - task: switch-app-routes
    file: git-pipeline//ci/tasks/update-routes.yml
    params:
      PCF_APP_SUFFIX: ((pcf-production-shipping-suffix))
      PCF_APP_DOMAIN: ((pcf-production-app-domain))
      PCF_API: ((pcf-production-api))
      PCF_ORG: ((pcf-production-organization))
      PCF_SPACE: ((pcf-production-space))
      PCF_USER: ((pcf-username))
      PCF_PWD: ((pcf-password))

# - name: upload-shipping-git-release
#   public: true
#   plan:
#   - aggregate:
#     - get: git-shipping
#       trigger: true
#       passed: 
#         - promote-new-version-shipping
#     - get: shipping-release-bucket
#     - get: git-pipeline
#     - get: version
#       params: { pre: build }
#   - task: create-shipping-release-info
#     file: git-pipeline//ci/tasks/prepare-release.yml
#     params:
#       APP_NAME: shipping
#   - put: shipping-release
#     params:
#       name: prepared-release/name
#       tag: prepared-release/tag
#       globs:
#       - shipping-release-bucket/shipping-*.jar
#  - put: version
#    params: { file: version/number }

- name: run-performance-check
  serial: true
  public: true
  plan:
  - aggregate:
    - get: git-shipping
      trigger: false
    - get: git-pipeline
  - task: run-performance-check
    file: git-pipeline//ci/tasks/jmeter-test.yml
    params:
      APP_REPO: git-shipping
      PRODUCTION: false
      SCRIPT_NAME: jmeter/shipping_load.jmx
      RESULT_DIR: PerfCheck
      PCF_APP_SUFFIX: ((pcf-dev-shipping-suffix))
      PCF_APP_DOMAIN: ((pcf-dev-app-domain))
      SERVER_PORT: 80
      VU_COUNT: 10
      LOOP_COUNT: 25 #250
      DT_LTN: FuncCheck
      FUNC_VALIDATION: false
      AVG_RT_VALIDATION: 3000
      THINK_TIME: 0
  - task: push-dynatrace-monspec-data
    file: git-pipeline//ci/tasks/push-dynatrace-monspec-data.yml
    params: 
      monspecserviceenvironment: shipping/Dev
      apitoken: ((dt_api_token))
      tenanthost: ((dt_tenant_host))
      APP_REPO: git-shipping 

- name: validate-performance-check
  serial: true
  public: true
  plan:
  - get: git-shipping
    trigger: true
    passed:
      - run-performance-check
  - get: git-pipeline
    trigger: false      
  - task: validate-via-monspec
    file: git-pipeline//ci/tasks/validate-via-monspec.yml
    params: 
      monspeccomparison: shipping/DevToDevLastHour
      apitoken: ((dt_api_token))
      tenanthost: ((dt_tenant_host))
      APP_REPO: git-shipping 